/// <reference types="react" />

import { AsYouType } from 'libphonenumber-js';
import { CountryCode } from 'libphonenumber-js';
import { FilledInputProps } from '@mui/material';
import { FormHelperTextProps } from '@mui/material';
import { getNumberType } from 'libphonenumber-js';
import { InputBaseComponentProps } from '@mui/material';
import { InputLabelProps } from '@mui/material';
import { InputProps } from '@mui/material';
import { isValidPhoneNumber as matchIsValidTel } from 'libphonenumber-js';
import type { MenuProps } from '@mui/material/Menu';
import { MenuProps as MenuProps_2 } from '@mui/material';
import { NumberType } from 'libphonenumber-js';
import { OutlinedInputProps } from '@mui/material';
import { OverridableStringUnion } from '@mui/types';
import { default as React_2 } from 'react';
import { SelectProps } from '@mui/material';
import { SxProps } from '@mui/system';
import { TextFieldClasses } from '@mui/material/TextField';
import type { TextFieldProps } from '@mui/material/TextField';
import { TextFieldPropsColorOverrides } from '@mui/material/TextField';
import { TextFieldPropsSizeOverrides } from '@mui/material/TextField';
import { Theme } from '@mui/material';

export { AsYouType }

declare type BaseTextFieldProps = Omit<TextFieldProps, 'onChange' | 'select' | 'type' | 'multiline' | 'defaultValue'>;

declare type ForceCallingCodeWithDefaultCountry = {
    forceCallingCode: true;
    defaultCountry: MuiTelInputCountry;
} | {
    forceCallingCode?: false | undefined;
    defaultCountry?: MuiTelInputCountry;
};

declare type GetFlagElement = (isoCode: MuiTelInputCountry, { countryName, isSelected, imgProps }: {
    countryName: string;
    isSelected: boolean;
    imgProps: React.ComponentPropsWithRef<'img'>;
}) => MuiTelInputFlagElement;

export { getNumberType }

declare const ISO_CODES: CountryCode[];

export { matchIsValidTel }

export declare const MuiTelInput: React_2.ForwardRefExoticComponent<(Omit<{
    label?: React_2.ReactNode;
    slot?: string | undefined;
    style?: React_2.CSSProperties | undefined;
    title?: string | undefined;
    color?: OverridableStringUnion<"error" | "primary" | "secondary" | "info" | "success" | "warning", TextFieldPropsColorOverrides> | undefined;
    content?: string | undefined;
    translate?: "yes" | "no" | undefined;
    margin?: "none" | "normal" | "dense" | undefined;
    children?: React_2.ReactNode;
    ref?: ((instance: HTMLDivElement | null) => void) | React_2.RefObject<HTMLDivElement> | null | undefined;
    className?: string | undefined;
    classes?: Partial<TextFieldClasses> | undefined;
    disabled?: boolean | undefined;
    error?: boolean | undefined;
    fullWidth?: boolean | undefined;
    focused?: boolean | undefined;
    hiddenLabel?: boolean | undefined;
    required?: boolean | undefined;
    size?: OverridableStringUnion<"small" | "medium", TextFieldPropsSizeOverrides> | undefined;
    sx?: SxProps<Theme> | undefined;
    variant?: "filled" | "outlined" | "standard" | undefined;
    key?: React_2.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: React_2.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "inline" | "none" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: React_2.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
    onFocusCapture?: React_2.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: React_2.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
    onBlurCapture?: React_2.FocusEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: React_2.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: React_2.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: React_2.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: React_2.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: React_2.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: React_2.TransitionEventHandler<HTMLDivElement> | undefined;
    component?: React_2.ElementType<any> | undefined;
    InputProps?: Partial<FilledInputProps> | Partial<OutlinedInputProps> | Partial<InputProps> | undefined;
    autoComplete?: string | undefined;
    FormHelperTextProps?: Partial<FormHelperTextProps> | undefined;
    helperText?: React_2.ReactNode;
    InputLabelProps?: Partial<InputLabelProps> | undefined;
    inputProps?: InputBaseComponentProps | undefined;
    inputRef?: React_2.Ref<any> | undefined;
    name?: string | undefined;
    rows?: string | number | undefined;
    maxRows?: string | number | undefined;
    minRows?: string | number | undefined;
    SelectProps?: Partial<SelectProps<unknown>> | undefined;
    value?: unknown;
} & {
    forceCallingCode: true;
    defaultCountry: CountryCode;
} & {
    excludedCountries?: CountryCode[] | undefined;
    onlyCountries?: CountryCode[] | undefined;
    preferredCountries?: CountryCode[] | undefined;
    focusOnSelectCountry?: boolean | undefined;
    disableDropdown?: boolean | undefined;
    langOfCountryName?: string | undefined;
    disableFormatting?: boolean | undefined;
    continents?: MuiTelInputContinent[] | undefined;
    onChange?: ((value: string, info: MuiTelInputInfo) => void) | undefined;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps_2> | undefined;
    getFlagElement?: GetFlagElement | undefined;
    unknownFlagElement?: React_2.ReactNode;
}, "ref"> | Omit<{
    label?: React_2.ReactNode;
    slot?: string | undefined;
    style?: React_2.CSSProperties | undefined;
    title?: string | undefined;
    color?: OverridableStringUnion<"error" | "primary" | "secondary" | "info" | "success" | "warning", TextFieldPropsColorOverrides> | undefined;
    content?: string | undefined;
    translate?: "yes" | "no" | undefined;
    margin?: "none" | "normal" | "dense" | undefined;
    children?: React_2.ReactNode;
    ref?: ((instance: HTMLDivElement | null) => void) | React_2.RefObject<HTMLDivElement> | null | undefined;
    className?: string | undefined;
    classes?: Partial<TextFieldClasses> | undefined;
    disabled?: boolean | undefined;
    error?: boolean | undefined;
    fullWidth?: boolean | undefined;
    focused?: boolean | undefined;
    hiddenLabel?: boolean | undefined;
    required?: boolean | undefined;
    size?: OverridableStringUnion<"small" | "medium", TextFieldPropsSizeOverrides> | undefined;
    sx?: SxProps<Theme> | undefined;
    variant?: "filled" | "outlined" | "standard" | undefined;
    key?: React_2.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: React_2.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "inline" | "none" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "page" | "step" | "false" | "true" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "false" | "true" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "true" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: React_2.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: React_2.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: React_2.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
    onFocusCapture?: React_2.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: React_2.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
    onBlurCapture?: React_2.FocusEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: React_2.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: React_2.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: React_2.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: React_2.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: React_2.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: React_2.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: React_2.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: React_2.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: React_2.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: React_2.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: React_2.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: React_2.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: React_2.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: React_2.TransitionEventHandler<HTMLDivElement> | undefined;
    component?: React_2.ElementType<any> | undefined;
    InputProps?: Partial<FilledInputProps> | Partial<OutlinedInputProps> | Partial<InputProps> | undefined;
    autoComplete?: string | undefined;
    FormHelperTextProps?: Partial<FormHelperTextProps> | undefined;
    helperText?: React_2.ReactNode;
    InputLabelProps?: Partial<InputLabelProps> | undefined;
    inputProps?: InputBaseComponentProps | undefined;
    inputRef?: React_2.Ref<any> | undefined;
    name?: string | undefined;
    rows?: string | number | undefined;
    maxRows?: string | number | undefined;
    minRows?: string | number | undefined;
    SelectProps?: Partial<SelectProps<unknown>> | undefined;
    value?: unknown;
} & {
    forceCallingCode?: false | undefined;
    defaultCountry?: CountryCode | undefined;
} & {
    excludedCountries?: CountryCode[] | undefined;
    onlyCountries?: CountryCode[] | undefined;
    preferredCountries?: CountryCode[] | undefined;
    focusOnSelectCountry?: boolean | undefined;
    disableDropdown?: boolean | undefined;
    langOfCountryName?: string | undefined;
    disableFormatting?: boolean | undefined;
    continents?: MuiTelInputContinent[] | undefined;
    onChange?: ((value: string, info: MuiTelInputInfo) => void) | undefined;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps_2> | undefined;
    getFlagElement?: GetFlagElement | undefined;
    unknownFlagElement?: React_2.ReactNode;
}, "ref">) & React_2.RefAttributes<HTMLDivElement>>;

export declare type MuiTelInputContinent = 'EU' | 'AS' | 'NA' | 'SA' | 'OC' | 'AF';

export declare type MuiTelInputCountry = (typeof ISO_CODES)[number];

export declare type MuiTelInputFlagElement = React.ReactNode;

export declare interface MuiTelInputInfo {
    countryCode: MuiTelInputCountry | null;
    countryCallingCode: string | null;
    nationalNumber: string | null;
    numberType: Exclude<NumberType, undefined> | null;
    numberValue: string | null;
    reason: MuiTelInputReason;
}

export declare type MuiTelInputProps = BaseTextFieldProps & ForceCallingCodeWithDefaultCountry & {
    excludedCountries?: MuiTelInputCountry[];
    onlyCountries?: MuiTelInputCountry[];
    preferredCountries?: MuiTelInputCountry[];
    focusOnSelectCountry?: boolean;
    disableDropdown?: boolean;
    langOfCountryName?: string;
    disableFormatting?: boolean;
    continents?: MuiTelInputContinent[];
    onChange?: (value: string, info: MuiTelInputInfo) => void;
    value?: string | undefined;
    MenuProps?: Partial<MenuProps>;
    getFlagElement?: GetFlagElement;
    unknownFlagElement?: MuiTelInputFlagElement;
};

export declare type MuiTelInputReason = 'country' | 'input';

export { }
